type Article {
  _id: String
  created_at: String
  updated_at: String
  title: String
  body: String
  publishAt: String
  teaserText: String
  image: UploadFile
  slug: String
}

type Job {
  _id: String
  created_at: String
  updated_at: String
  title: String
  company: String
  location: String
  from: String
  to: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Article | Job | Project | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Project {
  _id: String
  created_at: String
  updated_at: String
  title: String
  type: String
  github: String
  url: String
  description: String
  tags: String
  thumbnail: UploadFile
  slug: String
  order: Int
  screenshots(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type Query {
  article(id: String!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  job(id: String!): Job
  jobs(sort: String, limit: Int, start: Int, where: JSON): [Job]
  project(id: String!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: String!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: String!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UploadFile {
  _id: String
  created_at: String
  updated_at: String
  name: String
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: String
  type: String
  controller: String
  action: String
  enabled: Boolean
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: String
  name: String
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: String
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  role: UsersPermissionsRole
}
