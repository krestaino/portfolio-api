type Article {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  publishAt: DateTime!
  teaserText: String!
  image: UploadFile
  slug: String!
}

type ArticleAggregator {
  count: Int
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleConnection_id {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionBody {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCreatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionImage {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionPublishAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionSlug {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionTeaserText {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionUpdatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleGroupBy {
  _id: [ArticleConnection_id]
  createdAt: [ArticleConnectionCreatedAt]
  updatedAt: [ArticleConnectionUpdatedAt]
  title: [ArticleConnectionTitle]
  body: [ArticleConnectionBody]
  publishAt: [ArticleConnectionPublishAt]
  teaserText: [ArticleConnectionTeaserText]
  image: [ArticleConnectionImage]
  slug: [ArticleConnectionSlug]
}

input ArticleInput {
  title: String!
  body: String!
  publishAt: DateTime!
  teaserText: String!
  image: ID
  slug: String!
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createJobInput {
  data: JobInput
}

type createJobPayload {
  job: Job
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteJobInput {
  where: InputID
}

type deleteJobPayload {
  job: Job
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

type Job {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  company: String!
  location: String!
  from: String!
  to: String!
  order: Int
}

type JobAggregator {
  count: Int
  sum: JobAggregatorSum
  avg: JobAggregatorAvg
  min: JobAggregatorMin
  max: JobAggregatorMax
}

type JobAggregatorAvg {
  order: Float
}

type JobAggregatorMax {
  order: Float
}

type JobAggregatorMin {
  order: Float
}

type JobAggregatorSum {
  order: Float
}

type JobConnection {
  values: [Job]
  groupBy: JobGroupBy
  aggregate: JobAggregator
}

type JobConnection_id {
  key: ID
  connection: JobConnection
}

type JobConnectionCompany {
  key: String
  connection: JobConnection
}

type JobConnectionCreatedAt {
  key: DateTime
  connection: JobConnection
}

type JobConnectionFrom {
  key: String
  connection: JobConnection
}

type JobConnectionLocation {
  key: String
  connection: JobConnection
}

type JobConnectionOrder {
  key: Int
  connection: JobConnection
}

type JobConnectionTitle {
  key: String
  connection: JobConnection
}

type JobConnectionTo {
  key: String
  connection: JobConnection
}

type JobConnectionUpdatedAt {
  key: DateTime
  connection: JobConnection
}

type JobGroupBy {
  _id: [JobConnection_id]
  createdAt: [JobConnectionCreatedAt]
  updatedAt: [JobConnectionUpdatedAt]
  title: [JobConnectionTitle]
  company: [JobConnectionCompany]
  location: [JobConnectionLocation]
  from: [JobConnectionFrom]
  to: [JobConnectionTo]
  order: [JobConnectionOrder]
}

input JobInput {
  title: String!
  company: String!
  location: String!
  from: String!
  to: String!
  order: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnection_id | ArticleConnectionCreatedAt | ArticleConnectionUpdatedAt | ArticleConnectionTitle | ArticleConnectionBody | ArticleConnectionPublishAt | ArticleConnectionTeaserText | ArticleConnectionImage | ArticleConnectionSlug | Job | createJobPayload | updateJobPayload | deleteJobPayload | JobConnection | JobAggregator | JobAggregatorSum | JobAggregatorAvg | JobAggregatorMin | JobAggregatorMax | JobGroupBy | JobConnection_id | JobConnectionCreatedAt | JobConnectionUpdatedAt | JobConnectionTitle | JobConnectionCompany | JobConnectionLocation | JobConnectionFrom | JobConnectionTo | JobConnectionOrder | Project | createProjectPayload | updateProjectPayload | deleteProjectPayload | ProjectConnection | ProjectAggregator | ProjectGroupBy | ProjectConnection_id | ProjectConnectionCreatedAt | ProjectConnectionUpdatedAt | ProjectConnectionOrder | ProjectConnectionTitle | ProjectConnectionType | ProjectConnectionSlug | ProjectConnectionGithub | ProjectConnectionUrl | ProjectConnectionDescription | ProjectConnectionThumbnail | ProjectConnectionPlayStore | ProjectConnectionAppStore | Tag | createTagPayload | updateTagPayload | deleteTagPayload | TagConnection | TagAggregator | TagGroupBy | TagConnection_id | TagConnectionCreatedAt | TagConnectionUpdatedAt | TagConnectionTitle | TagConnectionSlug | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createJob(input: createJobInput): createJobPayload
  updateJob(input: updateJobInput): updateJobPayload
  deleteJob(input: deleteJobInput): deleteJobPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Project {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Int!
  title: String!
  type: String!
  slug: String!
  github: String
  url: String
  description: String!
  thumbnail: UploadFile
  playStore: String
  appStore: String
  screenshots(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type ProjectAggregator {
  count: Int
}

type ProjectConnection {
  values: [Project]
  groupBy: ProjectGroupBy
  aggregate: ProjectAggregator
}

type ProjectConnection_id {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionAppStore {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionCreatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionDescription {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionGithub {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionOrder {
  key: Int
  connection: ProjectConnection
}

type ProjectConnectionPlayStore {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionSlug {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionThumbnail {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionTitle {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionType {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionUpdatedAt {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionUrl {
  key: String
  connection: ProjectConnection
}

type ProjectGroupBy {
  _id: [ProjectConnection_id]
  createdAt: [ProjectConnectionCreatedAt]
  updatedAt: [ProjectConnectionUpdatedAt]
  order: [ProjectConnectionOrder]
  title: [ProjectConnectionTitle]
  type: [ProjectConnectionType]
  slug: [ProjectConnectionSlug]
  github: [ProjectConnectionGithub]
  url: [ProjectConnectionUrl]
  description: [ProjectConnectionDescription]
  thumbnail: [ProjectConnectionThumbnail]
  playStore: [ProjectConnectionPlayStore]
  appStore: [ProjectConnectionAppStore]
}

input ProjectInput {
  order: Int!
  title: String!
  type: String!
  slug: String!
  github: String
  url: String
  description: String!
  screenshots: [ID]
  thumbnail: ID
  tags: [ID]
  playStore: String
  appStore: String
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  job(id: ID!): Job
  jobs(sort: String, limit: Int, start: Int, where: JSON): [Job]
  jobsConnection(sort: String, limit: Int, start: Int, where: JSON): JobConnection
  project(id: ID!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectConnection
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

type TagAggregator {
  count: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnection_id {
  key: ID
  connection: TagConnection
}

type TagConnectionCreatedAt {
  key: DateTime
  connection: TagConnection
}

type TagConnectionSlug {
  key: String
  connection: TagConnection
}

type TagConnectionTitle {
  key: String
  connection: TagConnection
}

type TagConnectionUpdatedAt {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  _id: [TagConnection_id]
  createdAt: [TagConnectionCreatedAt]
  updatedAt: [TagConnectionUpdatedAt]
  title: [TagConnectionTitle]
  slug: [TagConnectionSlug]
}

input TagInput {
  title: String!
  slug: String!
  projects: [ID]
}

input updateArticleInput {
  where: InputID
  data: ArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateJobInput {
  where: InputID
  data: JobInput
}

type updateJobPayload {
  job: Job
}

input updateProjectInput {
  where: InputID
  data: ProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: TagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
